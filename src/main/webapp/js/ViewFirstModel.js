// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["underscore", "jquery", "Property", "ViewFirstEvents"], function(_, $, Property, Events) {
    var Collection, Model;
    Collection = (function(_super) {
      var checkModelStillMatches, modelAdded, removeCurrentChangeTrigger;

      __extends(Collection, _super);

      function Collection(modelType, filter) {
        var model, _i, _len, _ref,
          _this = this;
        this.filter = filter != null ? filter : function() {
          return true;
        };
        Collection.__super__.constructor.apply(this, arguments);
        this.instances = {};
        this.changeTriggers = {};
        modelType.on("created", function(model) {
          return modelAdded.call(_this, model);
        });
        _ref = modelType.instances;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          modelAdded.call(this, model, true);
        }
      }

      Collection.prototype.getAll = function() {
        var key, value, _ref, _results;
        _ref = this.instances;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(value);
        }
        return _results;
      };

      removeCurrentChangeTrigger = function(model) {
        var currentChangeTrigger;
        currentChangeTrigger = this.changeTriggers[model.clientId];
        if (currentChangeTrigger != null) {
          return currentChangeTrigger.off();
        }
      };

      modelAdded = function(model, silent) {
        var _this = this;
        if (silent == null) {
          silent = false;
        }
        if (this.filter(model)) {
          this.instances[model.clientId] = model;
          removeCurrentChangeTrigger.call(this, model);
          this.changeTriggers[model.clientId] = model.on("change", function() {
            return checkModelStillMatches.call(_this, model);
          });
          if (!silent) {
            return this.trigger("add", model);
          }
        } else {
          if (this.changeTriggers[model.clientId] == null) {
            return this.changeTriggers[model.clientId] = model.on("change", function() {
              return modelAdded.call(_this, model);
            });
          }
        }
      };

      checkModelStillMatches = function(model) {
        var _this = this;
        if (!this.filter(model)) {
          delete this.instances[model.clientId];
          removeCurrentChangeTrigger.call(this, model);
          this.changeTriggers[model.clientId] = model.on("change", function() {
            return _this.modelAdded.call(_this, model);
          });
          return this.trigger("remove", model);
        }
      };

      Collection.prototype.size = function() {
        return Object.keys(this.instances).length;
      };

      return Collection;

    })(Events);
    Model = (function(_super) {
      var addCreateCollectionFunction, addInstances, createClientId, lastClientIdUsed;

      __extends(Model, _super);

      function Model(properties) {
        this.properties = properties != null ? properties : {};
        Model.__super__.constructor.apply(this, arguments);
        this.clientId = createClientId();
        this.createProperty("id");
      }

      lastClientIdUsed = 0;

      createClientId = function() {
        return lastClientIdUsed = lastClientIdUsed + 1;
      };

      Model.prototype.createProperty = function(name, relationship) {
        var property,
          _this = this;
        property = new Property(name, relationship);
        property.on("change", function() {
          return _this.trigger("change");
        });
        return this.properties[name] = property;
      };

      Model.prototype.isNew = function() {
        return !this.properties["id"].isSet();
      };

      Model.prototype.get = function(name) {
        return this.properties[name].get();
      };

      Model.prototype.getProperty = function(name) {
        return this.properties[name];
      };

      Model.prototype.findProperty = function(key) {
        var current, element, elements, _i, _len;
        elements = key.split(".");
        current = this;
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          element = elements[_i];
          current = this.getProperty(element);
        }
        return current;
      };

      Model.prototype.set = function(name, value) {
        return this.properties[name].set(value);
      };

      Model.prototype.add = function(name, value) {
        return this.properties[name].add(value);
      };

      Model.prototype.removeAll = function(name) {
        return this.properties[name].removeAll();
      };

      Model.prototype.onPropertyChange = function(propertyName, func) {
        return this.properties[propertyName].on("change", func);
      };

      Model.prototype.asJson = function(includeOnlyDirtyProperties) {
        var json, key, property, _ref;
        if (includeOnlyDirtyProperties == null) {
          includeOnlyDirtyProperties = true;
        }
        json = {};
        _ref = this.properties;
        for (key in _ref) {
          property = _ref[key];
          if (!includeOnlyDirtyProperties || property.isDirty || property.name === "id") {
            property.addToJson(json, includeOnlyDirtyProperties);
          }
        }
        return json;
      };

      Model.prototype.save = function() {
        var json, onSuccess,
          _this = this;
        onSuccess = function(jsonString, successCode, somethingElse) {
          return _this.update(JSON.parse(jsonString));
        };
        this._assertUrl();
        json = this.asJson();
        $.ajax(this._getSaveUrl(), {
          type: this._getSaveHttpMethod(),
          data: json,
          success: onSuccess
        });
        return console.log(JSON.stringify(json));
      };

      Model.prototype["delete"] = function() {
        var onSuccess,
          _this = this;
        onSuccess = function(jsonString, successCode, somethingElse) {
          return console.log("TODO will need to trigger an event");
        };
        return $.ajax(this._getSaveUrl(), {
          type: "DELETE",
          success: onSuccess
        });
      };

      Model.prototype.update = function(json, clean) {
        var key, value, _results;
        if (clean == null) {
          clean = true;
        }
        _results = [];
        for (key in json) {
          value = json[key];
          _results.push(this.properties[key].setFromJson(value, clean = true));
        }
        return _results;
      };

      addInstances = function(Child) {
        return Child.instances = [];
      };

      addCreateCollectionFunction = function(Child) {
        return Child.createCollection = function(filter) {
          return new Collection(Child, filter);
        };
      };

      Model.extend = function(Child) {
        var ChildExtended, Surrogate, key;
        ChildExtended = function() {
          Model.apply(this, arguments);
          Child.apply(this, arguments);
          this.constructor.instances.push(this);
          this.constructor.trigger("created", this);
          return this;
        };
        Surrogate = function() {};
        Surrogate.prototype = this.prototype;
        ChildExtended.prototype = new Surrogate;
        ChildExtended.prototype.constructor = ChildExtended;
        _.extend(ChildExtended, new Events);
        addInstances(ChildExtended);
        addCreateCollectionFunction(ChildExtended);
        for (key in Child.prototype) {
          if (Child.prototype.hasOwnProperty(key)) {
            ChildExtended.prototype[key] = Child.prototype[key];
          }
        }
        return ChildExtended;
      };

      Model.prototype._getSaveHttpMethod = function() {
        if (this.isNew()) {
          return "POST";
        } else {
          return "PUT";
        }
      };

      Model.prototype._getSaveUrl = function() {
        return this.url + "s" + (!this.isNew() ? "/" + this.get("id") : "");
      };

      Model.prototype._assertUrl = function() {
        if (this.url == null) {
          throw "url must be defined for model";
        }
      };

      return Model;

    })(Events);
    return Model;
  });

}).call(this);
