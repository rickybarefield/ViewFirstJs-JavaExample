// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["underscore", "ViewFirstEvents"], function(_, Events) {
    var Property;
    return Property = (function(_super) {

      __extends(Property, _super);

      Property.prototype.value = null;

      Property.prototype.isDirty = true;

      function Property(name, relationship, type) {
        this.name = name;
        this.type = type;
        this.addToJson = __bind(this.addToJson, this);

        Property.__super__.constructor.apply(this, arguments);
        if (relationship != null) {
          _.extend(this, new relationship());
        }
      }

      Property.prototype.get = function() {
        return this.value;
      };

      Property.prototype.getProperty = function() {
        throw "Cannot get a property for this type of relationship";
      };

      Property.prototype.set = function(value) {
        var oldValue;
        oldValue = this.value;
        this.isDirty = true;
        this.value = value;
        return this.trigger("change", oldValue, this.value);
      };

      Property.prototype.isSet = function() {
        return this.value != null;
      };

      Property.prototype.setFromJson = function(json, clean) {
        this.set(json);
        return this.isDirty = !clean;
      };

      Property.prototype.add = function() {
        throw "Cannot call add on a basic property";
      };

      Property.prototype.removeAll = function() {
        throw "Cannot call removeAll on a basic property";
      };

      Property.prototype.addToJson = function(json) {
        if (this.value != null) {
          return json[this.name] = this.value;
        }
      };

      return Property;

    })(Events);
  });

}).call(this);
