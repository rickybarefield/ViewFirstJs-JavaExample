// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["backbone"], function(Backbone) {
    var ViewFirstRouter;
    return ViewFirstRouter = (function(_super) {

      __extends(ViewFirstRouter, _super);

      function ViewFirstRouter(viewFirst) {
        this.viewFirst = viewFirst;
        this.updateState = __bind(this.updateState, this);

        this.addRoute = __bind(this.addRoute, this);

      }

      ViewFirstRouter.prototype.addRoute = function(pageName, index) {
        var createRegex, routingFunction,
          _this = this;
        if (index == null) {
          index = false;
        }
        createRegex = function(pageName) {
          return new RegExp("^" + pageName + "/?([/A-Za-z!0-9]*)$");
        };
        routingFunction = function(serializedModels) {
          var serializedModel, _i, _len, _ref, _results;
          console.log("Routing to " + pageName);
          _this.currentPage = pageName;
          _this.viewFirst.namedModels = {};
          _this.viewFirst.renderView(pageName);
          if ((serializedModels != null) && serializedModels !== "") {
            _ref = serializedModels.split("/");
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              serializedModel = _ref[_i];
              _results.push((function(serializedModel) {
                var clazz, id, model, serializedParts;
                serializedParts = serializedModel.split("!");
                clazz = window[serializedParts[1]];
                id = parseInt(serializedParts[2]);
                model = clazz.findOrCreate != null ? clazz.findOrCreate({
                  id: id
                }) : new clazz({
                  id: id
                });
                model.fetch({
                  success: function() {
                    return _this.viewFirst.setNamedModel(serializedParts[0], model, true);
                  }
                });
                return console.log(model.get("description") + "with id: " + model.get("id"));
              })(serializedModel));
            }
            return _results;
          }
        };
        console.log("Adding a route to " + pageName);
        this.route(createRegex(pageName), pageName, routingFunction);
        if (index) {
          return this.route("", "index", function() {
            console.log("navy");
            return _this.navigate(pageName, true);
          });
        }
      };

      ViewFirstRouter.prototype.updateState = function() {
        var key, modelsSerialized, namedModels, url;
        namedModels = this.viewFirst.namedModels;
        modelsSerialized = (function() {
          var _results;
          _results = [];
          for (key in namedModels) {
            if (namedModels[key].id != null) {
              _results.push((function(key) {
                return "/" + key + "!" + namedModels[key].constructor.name + "!" + namedModels[key].id;
              })(key));
            }
          }
          return _results;
        })();
        url = this.currentPage + modelsSerialized.join("");
        return this.navigate(url);
      };

      return ViewFirstRouter;

    })(Backbone.Router);
  });

}).call(this);
